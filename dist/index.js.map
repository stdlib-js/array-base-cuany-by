{
  "version": 3,
  "sources": ["../lib/assign.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n\n\n// FUNCTIONS //\n\n/**\n* Cumulatively tests whether at least one element in a provided array passes a test implemented by a predicate function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ false, false, false, true, false  ];\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var out = indexed( x, y, 2, 0, isPositive );\n* // returns [ false, null, false, null, false, null, true, null, true, null ]\n*/\nfunction indexed( x, y, stride, offset, predicate, thisArg ) {\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !flg && predicate.call(thisArg, x[ i ], i, x ) ) {\n\t\t\tflg = true;\n\t\t}\n\t\ty[ io ] = flg;\n\t\tio += stride;\n\t}\n\treturn y;\n}\n\n/**\n* Cumulatively tests whether at least one element in a provided array passes a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} y - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var toAccessorArray = require( '@stdlib/array-base-to-accessor-array' );\n* var arraylike2object = require( '@stdlib/array-base-arraylike2object' );\n*\n* var x = toAccessorArray( [ false, false, false, true, false ] );\n* var y = toAccessorArray( [ false, null, false, null, false, null, false, null, false, null ] );\n*\n* var arr = accessors( arraylike2object( x ), arraylike2object( y ), 2, 0, isPositive );\n*\n* var v = y.get( 0 );\n* // returns false\n*\n* v = y.get( 2 );\n* // returns false\n*\n* v = y.get( 4 );\n* // returns false\n*\n* v = y.get( 6 );\n* // returns true\n*\n* v = y.get( 8 );\n* // returns true\n*/\nfunction accessors( x, y, stride, offset, predicate, thisArg ) {\n\tvar xdata;\n\tvar ydata;\n\tvar xget;\n\tvar yset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tydata = y.data;\n\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( !flg && predicate.call( thisArg, xget( xdata, i ), i, x ) ) {\n\t\t\tflg = true;\n\t\t}\n\t\tyset( ydata, io, flg );\n\t\tio += stride;\n\t}\n\treturn ydata;\n}\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least one element in a provided array passes a test implemented by a predicate function and assigns results to provided output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 0, 0, 0, 1, 0 ];\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var out = assign( x, y, 2, 0, isPositive );\n// returns [ false, null, false, null, false, null, true, null, true, null ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\nfunction assign( x, y, stride, offset, predicate, thisArg ) {\n\tvar xo = arraylike2object( x );\n\tvar yo = arraylike2object( y );\n\n\tif (\n\t\txo.accessorProtocol ||\n\t\tyo.accessorProtocol\n\t) {\n\t\treturn accessors( xo, yo, stride, offset, predicate, thisArg );\n\t}\n\tindexed( x, y, stride, offset, predicate, thisArg );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = assign;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar filled = require( '@stdlib/array-base-filled' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least one element in a provided array passes a test implemented by a predicate function.\n*\n* @param {Collection} x - input array\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Array} output array\n*\n* @example\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 0, 0, 0, 1, 0 ];\n*\n* var y = cuanyBy( x, isPositive );\n* // returns [ false, false, false, true, true ]\n*/\nfunction cuanyBy( x, predicate, thisArg ) {\n\tvar y = filled( false, x.length );\n\treturn assign( x, y, 1, 0, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cuanyBy;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cumulatively test whether at least one element in a provided array passes a test implemented by a predicate function.\n*\n* @module @stdlib/array-base-cuany-by\n*\n* @example\n* var cuanyBy = require( '@stdlib/array-base-cuany-by' );\n*\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 0, 0, 0, 1, 0 ];\n*\n* var y = cuanyBy( x, isPositive );\n* // returns [ false, false, false, true, true ]\n*\n* @example\n* var cuanyBy = require( '@stdlib/array-base-cuany-by' );\n*\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 0, 0, 0, 1, 0 ];\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var arr = cuanyBy.assign( x, y, 2, 0, isPositive );\n* // returns [ false, null, false, null, false, null, true, null, true, null ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar main = require( './main.js' );\nvar assign = require( './assign.js' );\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,qCAAsC,EA4BtE,SAASC,EAASC,EAAGC,EAAGC,EAAQC,EAAQC,EAAWC,EAAU,CAC5D,IAAIC,EACAC,EACAC,EAIJ,IAFAF,EAAM,GACNC,EAAKJ,EACCK,EAAI,EAAGA,EAAIR,EAAE,OAAQQ,IACrB,CAACF,GAAOF,EAAU,KAAKC,EAASL,EAAGQ,CAAE,EAAGA,EAAGR,CAAE,IACjDM,EAAM,IAEPL,EAAGM,CAAG,EAAID,EACVC,GAAML,EAEP,OAAOD,CACR,CA0CA,SAASQ,EAAWT,EAAGC,EAAGC,EAAQC,EAAQC,EAAWC,EAAU,CAC9D,IAAIK,EACAC,EACAC,EACAC,EACAP,EACAC,EACAC,EAUJ,IARAE,EAAQV,EAAE,KACVW,EAAQV,EAAE,KAEVW,EAAOZ,EAAE,UAAW,CAAE,EACtBa,EAAOZ,EAAE,UAAW,CAAE,EAEtBK,EAAM,GACNC,EAAKJ,EACCK,EAAI,EAAGA,EAAIE,EAAM,OAAQF,IACzB,CAACF,GAAOF,EAAU,KAAMC,EAASO,EAAMF,EAAOF,CAAE,EAAGA,EAAGR,CAAE,IAC5DM,EAAM,IAEPO,EAAMF,EAAOJ,EAAID,CAAI,EACrBC,GAAML,EAEP,OAAOS,CACR,CA8BA,SAASG,EAAQd,EAAGC,EAAGC,EAAQC,EAAQC,EAAWC,EAAU,CAC3D,IAAIU,EAAKjB,EAAkBE,CAAE,EACzBgB,EAAKlB,EAAkBG,CAAE,EAE7B,OACCc,EAAG,kBACHC,EAAG,iBAEIP,EAAWM,EAAIC,EAAId,EAAQC,EAAQC,EAAWC,CAAQ,GAE9DN,EAASC,EAAGC,EAAGC,EAAQC,EAAQC,EAAWC,CAAQ,EAC3CJ,EACR,CAKAJ,EAAO,QAAUiB,ICnLjB,IAAAG,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,2BAA4B,EAC9CC,EAAS,IAuBb,SAASC,EAASC,EAAGC,EAAWC,EAAU,CACzC,IAAIC,EAAIN,EAAQ,GAAOG,EAAE,MAAO,EAChC,OAAOF,EAAQE,EAAGG,EAAG,EAAG,EAAGF,EAAWC,CAAQ,CAC/C,CAKAN,EAAO,QAAUG,ICDjB,IAAIK,EAAc,QAAS,uDAAwD,EAC/EC,EAAO,IACPC,EAAS,IAKbF,EAAaC,EAAM,SAAUC,CAAO,EAKpC,OAAO,QAAUD",
  "names": ["require_assign", "__commonJSMin", "exports", "module", "arraylike2object", "indexed", "x", "y", "stride", "offset", "predicate", "thisArg", "flg", "io", "i", "accessors", "xdata", "ydata", "xget", "yset", "assign", "xo", "yo", "require_main", "__commonJSMin", "exports", "module", "filled", "assign", "cuanyBy", "x", "predicate", "thisArg", "y", "setReadOnly", "main", "assign"]
}
