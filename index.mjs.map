{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\n\n\n// FUNCTIONS //\n\n/**\n* Cumulatively tests whether at least one element in a provided array passes a test implemented by a predicate function.\n*\n* @private\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ false, false, false, true, false  ];\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var out = indexed( x, y, 2, 0, isPositive );\n* // returns [ false, null, false, null, false, null, true, null, true, null ]\n*/\nfunction indexed( x, y, stride, offset, predicate, thisArg ) {\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tif ( !flg && predicate.call(thisArg, x[ i ], i, x ) ) {\n\t\t\tflg = true;\n\t\t}\n\t\ty[ io ] = flg;\n\t\tio += stride;\n\t}\n\treturn y;\n}\n\n/**\n* Cumulatively tests whether at least one element in a provided array passes a test implemented by a predicate function.\n*\n* @private\n* @param {Object} x - input array object\n* @param {Object} y - output array object\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} thisArg - execution context\n* @returns {Collection} output array\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = toAccessorArray( [ false, false, false, true, false ] );\n* var y = toAccessorArray( [ false, null, false, null, false, null, false, null, false, null ] );\n*\n* var arr = accessors( arraylike2object( x ), arraylike2object( y ), 2, 0, isPositive );\n*\n* var v = y.get( 0 );\n* // returns false\n*\n* v = y.get( 2 );\n* // returns false\n*\n* v = y.get( 4 );\n* // returns false\n*\n* v = y.get( 6 );\n* // returns true\n*\n* v = y.get( 8 );\n* // returns true\n*/\nfunction accessors( x, y, stride, offset, predicate, thisArg ) {\n\tvar xdata;\n\tvar ydata;\n\tvar xget;\n\tvar yset;\n\tvar flg;\n\tvar io;\n\tvar i;\n\n\txdata = x.data;\n\tydata = y.data;\n\n\txget = x.accessors[ 0 ];\n\tyset = y.accessors[ 1 ];\n\n\tflg = false;\n\tio = offset;\n\tfor ( i = 0; i < xdata.length; i++ ) {\n\t\tif ( !flg && predicate.call( thisArg, xget( xdata, i ), i, x ) ) {\n\t\t\tflg = true;\n\t\t}\n\t\tyset( ydata, io, flg );\n\t\tio += stride;\n\t}\n\treturn ydata;\n}\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least one element in a provided array passes a test implemented by a predicate function and assigns results to a provided output array.\n*\n* @param {Collection} x - input array\n* @param {Collection} y - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array offset\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Collection} output array\n*\n* @example\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 0, 0, 0, 1, 0 ];\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var out = assign( x, y, 2, 0, isPositive );\n// returns [ false, null, false, null, false, null, true, null, true, null ]\n*\n* var bool = ( y === out );\n* // returns true\n*/\nfunction assign( x, y, stride, offset, predicate, thisArg ) {\n\tvar xo = arraylike2object( x );\n\tvar yo = arraylike2object( y );\n\n\tif (\n\t\txo.accessorProtocol ||\n\t\tyo.accessorProtocol\n\t) {\n\t\treturn accessors( xo, yo, stride, offset, predicate, thisArg );\n\t}\n\tindexed( x, y, stride, offset, predicate, thisArg );\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default assign;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport filled from '@stdlib/array-base-filled';\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Cumulatively tests whether at least one element in a provided array passes a test implemented by a predicate function.\n*\n* @param {Collection} x - input array\n* @param {Function} predicate - test function\n* @param {*} [thisArg] - execution context\n* @returns {Array} output array\n*\n* @example\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 0, 0, 0, 1, 0 ];\n*\n* var y = cuanyBy( x, isPositive );\n* // returns [ false, false, false, true, true ]\n*/\nfunction cuanyBy( x, predicate, thisArg ) {\n\tvar y = filled( false, x.length );\n\treturn assign( x, y, 1, 0, predicate, thisArg );\n}\n\n\n// EXPORTS //\n\nexport default cuanyBy;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cumulatively test whether at least one element in a provided array passes a test implemented by a predicate function.\n*\n* @module @stdlib/array-base-cuany-by\n*\n* @example\n* import cuanyBy from '@stdlib/array-base-cuany-by';\n*\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 0, 0, 0, 1, 0 ];\n*\n* var y = cuanyBy( x, isPositive );\n* // returns [ false, false, false, true, true ]\n*\n* @example\n* import cuanyBy from '@stdlib/array-base-cuany-by';\n*\n* function isPositive( v ) {\n*     return v > 0;\n* }\n*\n* var x = [ 0, 0, 0, 1, 0 ];\n* var y = [ false, null, false, null, false, null, false, null, false, null ];\n*\n* var arr = cuanyBy.assign( x, y, 2, 0, isPositive );\n* // returns [ false, null, false, null, false, null, true, null, true, null ]\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport assign from './assign.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["assign","x","y","stride","offset","predicate","thisArg","xo","arraylike2object","yo","accessorProtocol","xdata","ydata","xget","yset","flg","io","i","data","accessors","length","call","indexed","cuanyBy","filled","setReadOnly","main"],"mappings":";;0TAkKA,SAASA,EAAQC,EAAGC,EAAGC,EAAQC,EAAQC,EAAWC,GACjD,IAAIC,EAAKC,EAAkBP,GACvBQ,EAAKD,EAAkBN,GAE3B,OACCK,EAAGG,kBACHD,EAAGC,iBA7DL,SAAoBT,EAAGC,EAAGC,EAAQC,EAAQC,EAAWC,GACpD,IAAIK,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAUJ,IARAN,EAAQV,EAAEiB,KACVN,EAAQV,EAAEgB,KAEVL,EAAOZ,EAAEkB,UAAW,GACpBL,EAAOZ,EAAEiB,UAAW,GAEpBJ,GAAM,EACNC,EAAKZ,EACCa,EAAI,EAAGA,EAAIN,EAAMS,OAAQH,KACxBF,GAAOV,EAAUgB,KAAMf,EAASO,EAAMF,EAAOM,GAAKA,EAAGhB,KAC1Dc,GAAM,GAEPD,EAAMF,EAAOI,EAAID,GACjBC,GAAMb,EAEP,OAAOS,CACR,CAsCSO,CAAWZ,EAAIE,EAAIN,EAAQC,EAAQC,EAAWC,IAxHvD,SAAkBL,EAAGC,EAAGC,EAAQC,EAAQC,EAAWC,GAClD,IAAIS,EACAC,EACAC,EAIJ,IAFAF,GAAM,EACNC,EAAKZ,EACCa,EAAI,EAAGA,EAAIhB,EAAEmB,OAAQH,KACpBF,GAAOV,EAAUgB,KAAKf,EAASL,EAAGgB,GAAKA,EAAGhB,KAC/Cc,GAAM,GAEPb,EAAGc,GAAOD,EACVC,GAAMb,CAGR,CA2GCmB,CAASrB,EAAGC,EAAGC,EAAQC,EAAQC,EAAWC,GACnCJ,EACR,CChIA,SAASqB,EAAStB,EAAGI,EAAWC,GAE/B,OAAON,EAAQC,EADPuB,GAAQ,EAAOvB,EAAEmB,QACJ,EAAG,EAAGf,EAAWC,EACvC,CCWAmB,EAAAC,EAAA,SAAA1B"}